// Multilingual Service for TeleKiosk AI Assistant
// Supports English, Twi, Ga, and Ewe languages for Ghana

import { analyticsService } from './analyticsService';

class MultilingualService {
  constructor() {
    this.currentLanguage = 'en';
    this.supportedLanguages = ['en', 'tw', 'ga', 'ee'];
    this.fallbackLanguage = 'en';
    
    // Language detection patterns
    this.languagePatterns = {
      tw: { // Twi
        keywords: ['wo', 'mi', 'y…õ', 'na', 'firi', 'kasa', 'd…õn', '…õhe', 's…õn', 'wo ho te s…õn'],
        greetings: ['maakye', 'maaha', 'mema wo akye', 'wo ho te s…õn'],
        commonWords: ['aane', 'daabi', 'medaase', 'kos…õ', '…õy…õ', 'ampa'],
        weight: 1.0
      },
      ga: { // Ga
        keywords: ['mi', 'wo', 'k…õ', 'baa', 'ay…õ…õ', 'l…õ', 'kome', 'ehe', 's…õ…õ'],
        greetings: ['ojekoo', 'ojekoo nakai', 'bawo ni', '…õhe l…õ'],
        commonWords: ['…õ…õ', 'aii', 'oyiwa do', 'ni gb…õj…õ', '…õy…õ'],
        weight: 1.0
      },
      ee: { // Ewe
        keywords: ['me', 'w√≤', 'nye', 'n…õ', 'si', 'va', 'yi', 'aleke', '…ñe'],
        greetings: ['≈ãdi', '≈ãdi na mi', 'ef…îÃÉa', 'aleke n√®le'],
        commonWords: ['…õÃÉ', 'ao', 'akpe', 'me…ñe kuku', 'enyo'],
        weight: 1.0
      }
    };

    // Initialize with browser language preference
    this.initializeLanguage();
  }

  /**
   * Initialize language based on browser preferences
   */
  initializeLanguage() {
    try {
      const browserLang = navigator.language || navigator.userLanguage || 'en';
      const langCode = browserLang.substring(0, 2).toLowerCase();
      
      if (this.supportedLanguages.includes(langCode)) {
        this.currentLanguage = langCode;
      }
      
      // Check localStorage for saved preference
      const savedLang = localStorage.getItem('telekiosk_language');
      if (savedLang && this.supportedLanguages.includes(savedLang)) {
        this.currentLanguage = savedLang;
      }

      console.log('üåç Multilingual service initialized:', this.currentLanguage);
      
    } catch (error) {
      console.error('‚ùå Language initialization error:', error);
      this.currentLanguage = this.fallbackLanguage;
    }
  }

  /**
   * Detect language from text input
   */
  detectLanguage(text) {
    if (!text || typeof text !== 'string') {
      return { language: this.fallbackLanguage, confidence: 0 };
    }

    const cleanText = text.toLowerCase().trim();
    const words = cleanText.split(/\s+/);
    const scores = {};

    // Initialize scores for all languages
    this.supportedLanguages.forEach(lang => {
      scores[lang] = 0;
    });

    // Score based on language patterns
    for (const [lang, patterns] of Object.entries(this.languagePatterns)) {
      let langScore = 0;
      let matches = 0;

      // Check keywords
      patterns.keywords.forEach(keyword => {
        if (cleanText.includes(keyword)) {
          langScore += 2;
          matches++;
        }
      });

      // Check greetings (higher weight)
      patterns.greetings.forEach(greeting => {
        if (cleanText.includes(greeting)) {
          langScore += 3;
          matches++;
        }
      });

      // Check common words
      patterns.commonWords.forEach(word => {
        if (words.includes(word)) {
          langScore += 1;
          matches++;
        }
      });

      // Apply pattern weight and normalize
      scores[lang] = (langScore * patterns.weight) / Math.max(words.length, 1);
    }

    // English gets a base score for Latin characters
    if (/^[a-zA-Z\s.,!?'"]+$/.test(cleanText)) {
      scores['en'] += 0.5;
    }

    // Find the highest scoring language
    const detectedLang = Object.keys(scores).reduce((a, b) => 
      scores[a] > scores[b] ? a : b
    );

    const confidence = scores[detectedLang];
    const threshold = 0.3; // Minimum confidence threshold

    const result = {
      language: confidence > threshold ? detectedLang : this.fallbackLanguage,
      confidence: Math.min(confidence, 1.0),
      scores: scores,
      detectedWords: this.getDetectedWords(cleanText, detectedLang)
    };

    // Track language detection
    analyticsService.trackEvent('language_detection', {
      inputLanguage: result.language,
      confidence: result.confidence,
      textLength: text.length,
      currentLanguage: this.currentLanguage
    });

    return result;
  }

  /**
   * Get detected words for a specific language
   */
  getDetectedWords(text, language) {
    if (!this.languagePatterns[language]) return [];

    const patterns = this.languagePatterns[language];
    const detectedWords = [];

    [...patterns.keywords, ...patterns.greetings, ...patterns.commonWords].forEach(word => {
      if (text.includes(word)) {
        detectedWords.push(word);
      }
    });

    return detectedWords;
  }

  /**
   * Set current language
   */
  setLanguage(langCode) {
    if (!this.supportedLanguages.includes(langCode)) {
      console.warn(`‚ö†Ô∏è Unsupported language: ${langCode}`);
      return false;
    }

    const previousLang = this.currentLanguage;
    this.currentLanguage = langCode;

    // Save to localStorage
    try {
      localStorage.setItem('telekiosk_language', langCode);
    } catch (error) {
      console.error('‚ùå Failed to save language preference:', error);
    }

    // Track language change
    analyticsService.trackEvent('language_change', {
      fromLanguage: previousLang,
      toLanguage: langCode,
      timestamp: Date.now()
    });

    console.log(`üåç Language changed: ${previousLang} ‚Üí ${langCode}`);
    return true;
  }

  /**
   * Get current language
   */
  getCurrentLanguage() {
    return this.currentLanguage;
  }

  /**
   * Get language display name
   */
  getLanguageName(langCode = this.currentLanguage) {
    const names = {
      'en': 'English',
      'tw': 'Twi',
      'ga': 'Ga',
      'ee': 'Ewe'
    };
    return names[langCode] || 'Unknown';
  }

  /**
   * Get language native name
   */
  getLanguageNativeName(langCode = this.currentLanguage) {
    const nativeNames = {
      'en': 'English',
      'tw': 'Twi',
      'ga': 'Ga',
      'ee': 'E ãegbe'
    };
    return nativeNames[langCode] || 'Unknown';
  }

  /**
   * Get supported languages list
   */
  getSupportedLanguages() {
    return this.supportedLanguages.map(code => ({
      code,
      name: this.getLanguageName(code),
      nativeName: this.getLanguageNativeName(code),
      flag: this.getLanguageFlag(code)
    }));
  }

  /**
   * Get language flag emoji
   */
  getLanguageFlag(langCode) {
    const flags = {
      'en': 'üá¨üáß',
      'tw': 'üá¨üá≠',
      'ga': 'üá¨üá≠',
      'ee': 'üá¨üá≠'
    };
    return flags[langCode] || 'üåç';
  }

  /**
   * Translate system prompts based on language
   */
  getSystemPrompt(langCode = this.currentLanguage) {
    const prompts = {
      'en': `You are TeleKiosk Assistant, a helpful AI assistant for The Bank Hospital in Ghana.

PRIMARY FUNCTIONS:
1. Help patients book appointments with appropriate doctors
2. Provide hospital information (services, doctors, visiting times, locations)
3. Detect medical emergencies and provide immediate guidance
4. Answer general health questions (non-diagnostic only)
5. Assist with hospital navigation and policies
6. Support patients in English and local Ghanaian languages

CRITICAL GUIDELINES:
- NEVER provide medical diagnoses or treatment advice
- Always maintain patient privacy and confidentiality
- For medical emergencies, immediately direct to emergency services
- Be culturally sensitive to Ghanaian healthcare context
- Always be empathetic, professional, and respectful
- If unsure about medical information, refer to hospital staff

HOSPITAL INFORMATION:
- Location: The Bank Hospital, Accra, Ghana
- Emergency: 24/7 available - Call 999 or 193
- Contact: +233-599 211 311
- Email: info@telekiosk.com
- Languages: English, Twi, Ga, Ewe supported

Remember: You are here to assist and guide, not to replace medical professionals.`,

      'tw': `Wo y…õ TeleKiosk Assistant, …îboafo…î a …îboa nnipa w…î The Bank Hospital w…î Ghana.

NE DWUMA TITIRIW:
1. Boa ayarefo…î ma w…îb…õtumi ak…îhw…õ ad…îkotafo…î
2. Ka ayaresabea no ho ns…õm (dwumadie, ad…îkotafo…î, ber…õ a w…îk…î hw…õ)
3. Hunu pr…õko mpr…õko ns…õm na boa w…în nt…õm
4. Bua akwahosan ho ns…õm (nanso nkyer…õ yare…õ biara)
5. Boa w…î ayaresabea no mu akwankyer…õ ho
6. Kasa Twi, Bor…îfo, Ga, ne Ewe

NNE∆êMA A ∆êS∆ê S∆ê WOKAE:
- Nkyer…õ yare…õ biara anaa aduro biara mma obiara
- Di ayarefo…î ho kokoams…õm so
- S…õ …õy…õ pr…õko a, ma w…înfr…õ 999 anaa 193 nt…õm
- Bu amammer…õ Ghana mu ayaresabea ho
- Y…õ ayamhyehye, obu, ne nea …îw…î suban pa
- S…õ wonnim ayaresabea ho biribi a, ma w…înk…îbisa ayaresabea no mu adwumay…õfo…î

AYARESABEA NO HO NS∆êM:
- Baabi: The Bank Hospital, Accra, Ghana  
- Pr…õko: Ber…õ biara - Fr…õ 999 anaa 193
- Telefon: +233-599 211 311
- Email: info@telekiosk.com

Kae s…õ: Wow…î h…î s…õ wob…õboa, nanso wonnsesa ad…îkotafo…î ananmu.`,

      'ga': `Emi nye TeleKiosk Assistant, meboafo le The Bank Hospital le Ghana.

MI DWUMADI GBEJIAL∆ê:
1. Boa ayar…õf…î…î be baa dokitafo…î gb…î
2. Gbl…î ayar…õj…î…î ≈ãu ny…î≈ã…î…î (dwumadi…õ, dokitafo…î, ber…õ mli w…îba hw…õ)
3. Nya pr…õko pr…õko nu…î…î eye boa w…în kaba
4. Gbe akwahosan ≈ãu ny…î≈ã…î…î (k…õ ny…õ yar…õ…õ sane ko)
5. Boa ayar…õj…î…î mli kpas…õ ≈ãu
6. Kasa Ga, Bl…îf…î, Twi, k…õ Ewe

NU∆Ü∆Ü MLI E S∆ê MIKPO∆Ü:
- Ko gbl…î yar…õ…õ sane aduru ko na obii
- Di ayar…õf…î…î ≈ãu kokoams…õm so
- S…õ e nye pr…õko ko la, ma w…îfr…õ 999 sane 193 kaba
- Bu Ghana ayar…õj…î…î tsui ≈ãu
- Nye ayamhyehye, obu, k…õ obaa suban yof…õ…õ
- S…õ ny…õ ayar…õj…î…î ≈ãu bii ko la, ma w…îk…îbisa ayar…õj…î…î mli yitsoof…î

AYAR∆êJ∆Ü∆Ü ≈ãU NY∆Ü≈ä∆Ü∆Ü:
- Afii: The Bank Hospital, Accra, Ghana
- Pr…õko: Ber…õ kome - Fr…õ 999 sane 193  
- Telefon: +233-599 211 311
- Email: info@telekiosk.com

Kpo…î je: Ew…î afii be boa, k…õ nits…õ dokitafo…î te≈ã ko.`,

      'ee': `Menye TeleKiosk Assistant, kpe…ñe≈ãut…î si n…îa The Bank Hospital le Ghana.

NYE D∆ÜW∆ÜW∆Ü VEVEVEAWO:
1. Kpe …ñe d…în…îwo ≈ãu be woado dokitawo
2. Gbl…î k…îdzi ∆íe nyawo (d…îw…îw…îwo, dokitawo, …£eyi…£i si wovana)
3. De dz…îdz…îme t…îx…õawo ase eye n√†kpe …ñe wo ≈ãu kabakaba
4. ∆âo l√£mes…õsr…îÃÉ ∆íe biabiaw√≥ ≈ãu (gake m√®gagbl…î d…îl√©leawo o)
5. Kpe …ñe amewo ≈ãu le k…îdzi me m…îz…îz…î …ñe eme
6. ∆ëo nu E ãegbe, Yevugbe, Twi, kple Ga

NUSIWO NYA VE LA:
- M√®gagbl…î d…îl√©le a…ñeke alo atike a…ñeke na ame a…ñeke o
- Dz…î d…în…îwo ∆íe nya …£a…£lawo ≈ãu
- Ne enye gatagbagba la, na woay…î 999 alo 193 enumake
- Bu Ghana ∆íe k…îdzi ∆íe nuw…înawo ≈ãu
- N…î b…îb…îe, de bubu ame ≈ãu, eye n√†l√©a ≈ãu
- Ne m√®nya k…îdzi ∆íe nya a…ñeke o la, na woabia k…îdzin…îlawo

K∆ÜDZI ∆íE NYAWO:
- N…î∆íe: The Bank Hospital, Accra, Ghana
- Gatagbagba: ∆îesia…£i - Y…î 999 alo 193
- Telefon: +233-599 211 311  
- Email: info@telekiosk.com

√êo ≈ãku edzi: √àle afii be n√†kpe …ñe amewo ≈ãu, ke menye be n√†…ñ…îli dokitawo o.`
    };

    return prompts[langCode] || prompts['en'];
  }

  /**
   * Get localized emergency message
   */
  getEmergencyMessage(langCode = this.currentLanguage) {
    const messages = {
      'en': 'üö® This sounds like a medical emergency. Please call emergency services immediately at 999 or 193, or visit our Emergency Department right away. Do not delay seeking immediate medical attention.',
      'tw': 'üö® Eyi te s…õ ayaresem a …õy…õ pr…õko. Y…õ s…õ wofr…õ pr…õko adwumay…õfo…î w…î 999 anaa 193 nt…õm ara, anaa k…î y…õn Pr…õko Dwumadibea h…î nt…õm. Mma wo ber…õ so w…î pr…õko ayaresa hwehw…õ mu.',
      'ga': 'üö® Ey…õ ayar…õ pr…õko. Fr…õ pr…õko yitsoof…î 999 sane 193 kaba, sane k…î y…õn Pr…õko Yitsoo h…î nt…õm. Ko ma wo ber…õ so w…î pr…õko ayar…õsa hwehw…õ mu.',
      'ee': 'üö® Esia …ñi be d…îl√©le ses·∫Ω a…ñe w√≤le dz…îdz…îm. Taflatse y…î gatagbagba d…îw…îlawo le 999 alo 193 enumake, alo yi m√≠a∆íe Gatagbagba ∆íe n…î∆íe la enumake. M√®gana …£eyi…£i nava eme hafi n√†di kpekpe…ñe≈ãu o.'
    };

    return messages[langCode] || messages['en'];
  }

  /**
   * Get localized greetings
   */
  getGreeting(langCode = this.currentLanguage) {
    const greetings = {
      'en': 'Hello! How can I help you today?',
      'tw': 'Akwaaba! Mep…õ s…õn na meboa wo …õnn…õ?',
      'ga': 'Bawo! S…õn na matumi aboa wo …õnn…õ?',
      'ee': 'Ndi! Aleke si maw…î be makpe …ñe ≈ãuw√≤ egbea?'
    };

    return greetings[langCode] || greetings['en'];
  }

  /**
   * Get localized common responses
   */
  getCommonResponses(langCode = this.currentLanguage) {
    const responses = {
      'en': {
        booking: 'I can help you book an appointment. What service do you need?',
        services: 'We offer Cardiology, Pediatrics, Dermatology, Neurology, Orthopedics, and Emergency Medicine.',
        hours: 'Our general services are available Monday - Sunday, 8:00 AM - 8:00 PM. Emergency services are available 24/7.',
        contact: 'You can reach us at +233-599 211 311 or email info@telekiosk.com',
        thankyou: 'Thank you for choosing TeleKiosk Hospital!'
      },
      'tw': {
        booking: 'Metumi aboa wo ma woab…õtumi ak…îhw…õ ad…îkota. Dwumadie b…õn na wohia?',
        services: 'Y…õw…î Akoma ho adwuma, Mm…îfra ho adwuma, Nhoma ho adwuma, Amemene ho adwuma, Nnompe ho adwuma, ne Pr…õko ho adwuma.',
        hours: 'Y…õn dwumadi y…õ Dwoada - Kwasida, an…îpa 8:00 - anwumm…õr…õ 8:00. Pr…õko dwumadi w…î h…î ber…õ biara.',
        contact: 'Wob…õtumi afr…õ y…õn w…î +233-599 211 311 anaa wo email info@telekiosk.com',
        thankyou: 'Y…õda wo ase s…õ wopaw TeleKiosk Ayaresabea!'
      },
      'ga': {
        booking: 'Matumi aboa wo ma woaba dokita gb…î. Dwumadie b…õn na wohia?',
        services: 'Y…õw…î Akoma ≈ãu yitsoo, Mm…îfra ≈ãu yitsoo, Honam ≈ãu yitsoo, Amemene ≈ãu yitsoo, Nnompe ≈ãu yitsoo, k…õ Pr…õko ≈ãu yitsoo.',
        hours: 'Y…õn dwumadi nye Dwoada - K…îsi…ña, ogbongbong 8:00 - fi…õfi…õ 8:00. Pr…õko yitsoo w…î afii ber…õ biara.',
        contact: 'Wob…õtumi afr…õ y…õn w…î +233-599 211 311 sane email info@telekiosk.com',
        thankyou: 'Y…õda wo ase s…õ wotia TeleKiosk Ayar…õj…î…î!'
      },
      'ee': {
        booking: 'Mate ≈ãu akpe …ñe ≈ãuw√≤ be n√†yi dokita gb…î. D…îw…îw…î ka n√®hi√£?',
        services: 'M√≠ew…îa dzi ∆íe d…î, …ñeviwo ∆íe d…î, ≈ãutil√£ ∆íe d…î, ta me ∆íe d…î, ∆íuwo ∆íe d…î, kple gatagbagba ∆íe d…î.',
        hours: 'M√≠a∆íe d…îw…îw…î nye Dzo…ña - K…îsi…ña, ≈ãdi 8:00 - fi·∫Ω 8:00. Gatagbagba ∆íe d…îw…îw…î li …£esia…£i.',
        contact: '√Äte ≈ãu ay…î m√≠ le +233-599 211 311 alo email info@telekiosk.com',
        thankyou: 'M√≠eda akpe na w√≤ be n√®tia TeleKiosk K…îdzi!'
      }
    };

    return responses[langCode] || responses['en'];
  }

  /**
   * Get language-specific voice settings
   */
  getVoiceSettings(langCode = this.currentLanguage) {
    const voiceSettings = {
      'en': {
        lang: 'en-US',
        voice: 'en-US-Standard-C',
        rate: 0.9,
        pitch: 1.0
      },
      'tw': {
        lang: 'en-US', // Fallback to English voice for Twi
        voice: 'en-US-Standard-C',
        rate: 0.8,
        pitch: 0.9
      },
      'ga': {
        lang: 'en-US', // Fallback to English voice for Ga
        voice: 'en-US-Standard-C',
        rate: 0.8,
        pitch: 0.9
      },
      'ee': {
        lang: 'en-US', // Fallback to English voice for Ewe  
        voice: 'en-US-Standard-C',
        rate: 0.8,
        pitch: 0.9
      }
    };

    return voiceSettings[langCode] || voiceSettings['en'];
  }

  /**
   * Get service status
   */
  getStatus() {
    return {
      currentLanguage: this.currentLanguage,
      currentLanguageName: this.getLanguageName(),
      supportedLanguages: this.getSupportedLanguages(),
      detectionEnabled: true,
      capabilities: {
        detection: true,
        systemPrompts: true,
        emergencyMessages: true,
        voiceSettings: true,
        commonResponses: true
      }
    };
  }
}

// Create and export singleton instance
export const multilingualService = new MultilingualService();
export default multilingualService;